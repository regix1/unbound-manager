[
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tarfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tarfile",
        "description": "tarfile",
        "detail": "tarfile",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "IntPrompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "IntPrompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "IntPrompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "Prompt",
        "importPath": "rich.prompt",
        "description": "rich.prompt",
        "isExtraImport": true,
        "detail": "rich.prompt",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "rich.layout",
        "description": "rich.layout",
        "isExtraImport": true,
        "detail": "rich.layout",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "rich.text",
        "description": "rich.text",
        "isExtraImport": true,
        "detail": "rich.text",
        "documentation": {}
    },
    {
        "label": "Align",
        "importPath": "rich.align",
        "description": "rich.align",
        "isExtraImport": true,
        "detail": "rich.align",
        "documentation": {}
    },
    {
        "label": "Progress",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "SpinnerColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "TextColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "BarColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "Progress",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "SpinnerColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "TextColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "BarColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "Progress",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "SpinnerColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "TextColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "Progress",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "SpinnerColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "TextColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "Environment",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "FileSystemLoader",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "rich.syntax",
        "description": "rich.syntax",
        "isExtraImport": true,
        "detail": "rich.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "rich.syntax",
        "description": "rich.syntax",
        "isExtraImport": true,
        "detail": "rich.syntax",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "BackupManager",
        "kind": 6,
        "importPath": "unbound_manager.backup",
        "description": "unbound_manager.backup",
        "peekOfCode": "class BackupManager:\n    \"\"\"Manage Unbound configuration backups.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize backup manager.\"\"\"\n        ensure_directory(BACKUP_DIR, owner=None, group=None)\n    def create_backup(self, description: str = \"\") -> Path:\n        \"\"\"Create a backup of current configuration.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        backup_name = f\"backup_{timestamp}\"\n        if description:",
        "detail": "unbound_manager.backup",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "unbound_manager.backup",
        "description": "unbound_manager.backup",
        "peekOfCode": "console = Console()\nclass BackupManager:\n    \"\"\"Manage Unbound configuration backups.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize backup manager.\"\"\"\n        ensure_directory(BACKUP_DIR, owner=None, group=None)\n    def create_backup(self, description: str = \"\") -> Path:\n        \"\"\"Create a backup of current configuration.\"\"\"\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        backup_name = f\"backup_{timestamp}\"",
        "detail": "unbound_manager.backup",
        "documentation": {}
    },
    {
        "label": "UnboundManagerCLI",
        "kind": 6,
        "importPath": "unbound_manager.cli",
        "description": "unbound_manager.cli",
        "peekOfCode": "class UnboundManagerCLI:\n    \"\"\"Main CLI class for Unbound Manager.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize the CLI.\"\"\"\n        self.installer = UnboundInstaller()\n        self.config_manager = ConfigManager()\n        self.redis_manager = RedisManager()\n        self.dnssec_manager = DNSSECManager()\n        self.troubleshooter = Troubleshooter()\n        self.tester = UnboundTester()",
        "detail": "unbound_manager.cli",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "unbound_manager.cli",
        "description": "unbound_manager.cli",
        "peekOfCode": "def main():\n    \"\"\"Main entry point for the application.\"\"\"\n    try:\n        cli = UnboundManagerCLI()\n        cli.run()\n        return 0\n    except KeyboardInterrupt:\n        console.print(\"\\n[yellow]Application terminated by user[/yellow]\")\n        return 1\n    except Exception as e:",
        "detail": "unbound_manager.cli",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "unbound_manager.cli",
        "description": "unbound_manager.cli",
        "peekOfCode": "console = Console()\nclass UnboundManagerCLI:\n    \"\"\"Main CLI class for Unbound Manager.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize the CLI.\"\"\"\n        self.installer = UnboundInstaller()\n        self.config_manager = ConfigManager()\n        self.redis_manager = RedisManager()\n        self.dnssec_manager = DNSSECManager()\n        self.troubleshooter = Troubleshooter()",
        "detail": "unbound_manager.cli",
        "documentation": {}
    },
    {
        "label": "ConfigManager",
        "kind": 6,
        "importPath": "unbound_manager.config_manager",
        "description": "unbound_manager.config_manager",
        "peekOfCode": "class ConfigManager:\n    \"\"\"Manage Unbound configuration files.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize the configuration manager.\"\"\"\n        # Setup Jinja2 environment\n        template_dir = Path(__file__).parent.parent / \"templates\"\n        self.env = Environment(\n            loader=FileSystemLoader(template_dir),\n            trim_blocks=True,\n            lstrip_blocks=True,",
        "detail": "unbound_manager.config_manager",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "unbound_manager.config_manager",
        "description": "unbound_manager.config_manager",
        "peekOfCode": "console = Console()\nclass ConfigManager:\n    \"\"\"Manage Unbound configuration files.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize the configuration manager.\"\"\"\n        # Setup Jinja2 environment\n        template_dir = Path(__file__).parent.parent / \"templates\"\n        self.env = Environment(\n            loader=FileSystemLoader(template_dir),\n            trim_blocks=True,",
        "detail": "unbound_manager.config_manager",
        "documentation": {}
    },
    {
        "label": "get_app_version",
        "kind": 2,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "def get_app_version():\n    \"\"\"Get application version from VERSION file.\"\"\"\n    version_file = Path(__file__).parent.parent / \"VERSION\"\n    if version_file.exists():\n        return version_file.read_text().strip()\n    return \"2.0.1\"  # Fallback version\n# Version\nAPP_VERSION = get_app_version()\n# Paths\nUNBOUND_DIR = Path(\"/etc/unbound\")",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "APP_VERSION",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "APP_VERSION = get_app_version()\n# Paths\nUNBOUND_DIR = Path(\"/etc/unbound\")\nUNBOUND_CONF = UNBOUND_DIR / \"unbound.conf\"\nUNBOUND_CONF_D = UNBOUND_DIR / \"unbound.conf.d\"\nBACKUP_DIR = UNBOUND_DIR / \"backups\"\nROOT_KEY = UNBOUND_DIR / \"root.key\"\nROOT_HINTS = UNBOUND_DIR / \"root.hints\"\n# Redis\nREDIS_SOCKET = Path(\"/var/run/redis/redis.sock\")",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "UNBOUND_DIR",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "UNBOUND_DIR = Path(\"/etc/unbound\")\nUNBOUND_CONF = UNBOUND_DIR / \"unbound.conf\"\nUNBOUND_CONF_D = UNBOUND_DIR / \"unbound.conf.d\"\nBACKUP_DIR = UNBOUND_DIR / \"backups\"\nROOT_KEY = UNBOUND_DIR / \"root.key\"\nROOT_HINTS = UNBOUND_DIR / \"root.hints\"\n# Redis\nREDIS_SOCKET = Path(\"/var/run/redis/redis.sock\")\nREDIS_CONF = Path(\"/etc/redis/redis.conf\")\n# Systemd",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "UNBOUND_CONF",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "UNBOUND_CONF = UNBOUND_DIR / \"unbound.conf\"\nUNBOUND_CONF_D = UNBOUND_DIR / \"unbound.conf.d\"\nBACKUP_DIR = UNBOUND_DIR / \"backups\"\nROOT_KEY = UNBOUND_DIR / \"root.key\"\nROOT_HINTS = UNBOUND_DIR / \"root.hints\"\n# Redis\nREDIS_SOCKET = Path(\"/var/run/redis/redis.sock\")\nREDIS_CONF = Path(\"/etc/redis/redis.conf\")\n# Systemd\nSYSTEMD_SERVICE = Path(\"/etc/systemd/system/unbound.service\")",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "UNBOUND_CONF_D",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "UNBOUND_CONF_D = UNBOUND_DIR / \"unbound.conf.d\"\nBACKUP_DIR = UNBOUND_DIR / \"backups\"\nROOT_KEY = UNBOUND_DIR / \"root.key\"\nROOT_HINTS = UNBOUND_DIR / \"root.hints\"\n# Redis\nREDIS_SOCKET = Path(\"/var/run/redis/redis.sock\")\nREDIS_CONF = Path(\"/etc/redis/redis.conf\")\n# Systemd\nSYSTEMD_SERVICE = Path(\"/etc/systemd/system/unbound.service\")\n# URLs",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "BACKUP_DIR",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "BACKUP_DIR = UNBOUND_DIR / \"backups\"\nROOT_KEY = UNBOUND_DIR / \"root.key\"\nROOT_HINTS = UNBOUND_DIR / \"root.hints\"\n# Redis\nREDIS_SOCKET = Path(\"/var/run/redis/redis.sock\")\nREDIS_CONF = Path(\"/etc/redis/redis.conf\")\n# Systemd\nSYSTEMD_SERVICE = Path(\"/etc/systemd/system/unbound.service\")\n# URLs\nUNBOUND_RELEASES_URL = \"https://api.github.com/repos/NLnetLabs/unbound/releases\"",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "ROOT_KEY",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "ROOT_KEY = UNBOUND_DIR / \"root.key\"\nROOT_HINTS = UNBOUND_DIR / \"root.hints\"\n# Redis\nREDIS_SOCKET = Path(\"/var/run/redis/redis.sock\")\nREDIS_CONF = Path(\"/etc/redis/redis.conf\")\n# Systemd\nSYSTEMD_SERVICE = Path(\"/etc/systemd/system/unbound.service\")\n# URLs\nUNBOUND_RELEASES_URL = \"https://api.github.com/repos/NLnetLabs/unbound/releases\"\nROOT_HINTS_URL = \"https://www.internic.net/domain/named.cache\"",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "ROOT_HINTS",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "ROOT_HINTS = UNBOUND_DIR / \"root.hints\"\n# Redis\nREDIS_SOCKET = Path(\"/var/run/redis/redis.sock\")\nREDIS_CONF = Path(\"/etc/redis/redis.conf\")\n# Systemd\nSYSTEMD_SERVICE = Path(\"/etc/systemd/system/unbound.service\")\n# URLs\nUNBOUND_RELEASES_URL = \"https://api.github.com/repos/NLnetLabs/unbound/releases\"\nROOT_HINTS_URL = \"https://www.internic.net/domain/named.cache\"\nROOT_HINTS_BACKUP_URL = \"https://www.dns.icann.org/services/tools/internic/domain/named.cache\"",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "REDIS_SOCKET",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "REDIS_SOCKET = Path(\"/var/run/redis/redis.sock\")\nREDIS_CONF = Path(\"/etc/redis/redis.conf\")\n# Systemd\nSYSTEMD_SERVICE = Path(\"/etc/systemd/system/unbound.service\")\n# URLs\nUNBOUND_RELEASES_URL = \"https://api.github.com/repos/NLnetLabs/unbound/releases\"\nROOT_HINTS_URL = \"https://www.internic.net/domain/named.cache\"\nROOT_HINTS_BACKUP_URL = \"https://www.dns.icann.org/services/tools/internic/domain/named.cache\"\n# Default configuration\nDEFAULT_CONFIG = {",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "REDIS_CONF",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "REDIS_CONF = Path(\"/etc/redis/redis.conf\")\n# Systemd\nSYSTEMD_SERVICE = Path(\"/etc/systemd/system/unbound.service\")\n# URLs\nUNBOUND_RELEASES_URL = \"https://api.github.com/repos/NLnetLabs/unbound/releases\"\nROOT_HINTS_URL = \"https://www.internic.net/domain/named.cache\"\nROOT_HINTS_BACKUP_URL = \"https://www.dns.icann.org/services/tools/internic/domain/named.cache\"\n# Default configuration\nDEFAULT_CONFIG = {\n    \"server_ip\": \"127.0.0.1\",",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "SYSTEMD_SERVICE",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "SYSTEMD_SERVICE = Path(\"/etc/systemd/system/unbound.service\")\n# URLs\nUNBOUND_RELEASES_URL = \"https://api.github.com/repos/NLnetLabs/unbound/releases\"\nROOT_HINTS_URL = \"https://www.internic.net/domain/named.cache\"\nROOT_HINTS_BACKUP_URL = \"https://www.dns.icann.org/services/tools/internic/domain/named.cache\"\n# Default configuration\nDEFAULT_CONFIG = {\n    \"server_ip\": \"127.0.0.1\",\n    \"num_threads\": os.cpu_count() or 1,\n    \"msg_cache_size\": \"64m\",",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "UNBOUND_RELEASES_URL",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "UNBOUND_RELEASES_URL = \"https://api.github.com/repos/NLnetLabs/unbound/releases\"\nROOT_HINTS_URL = \"https://www.internic.net/domain/named.cache\"\nROOT_HINTS_BACKUP_URL = \"https://www.dns.icann.org/services/tools/internic/domain/named.cache\"\n# Default configuration\nDEFAULT_CONFIG = {\n    \"server_ip\": \"127.0.0.1\",\n    \"num_threads\": os.cpu_count() or 1,\n    \"msg_cache_size\": \"64m\",\n    \"rrset_cache_size\": \"128m\",\n    \"cache_min_ttl\": 300,",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "ROOT_HINTS_URL",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "ROOT_HINTS_URL = \"https://www.internic.net/domain/named.cache\"\nROOT_HINTS_BACKUP_URL = \"https://www.dns.icann.org/services/tools/internic/domain/named.cache\"\n# Default configuration\nDEFAULT_CONFIG = {\n    \"server_ip\": \"127.0.0.1\",\n    \"num_threads\": os.cpu_count() or 1,\n    \"msg_cache_size\": \"64m\",\n    \"rrset_cache_size\": \"128m\",\n    \"cache_min_ttl\": 300,\n    \"cache_max_ttl\": 86400,",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "ROOT_HINTS_BACKUP_URL",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "ROOT_HINTS_BACKUP_URL = \"https://www.dns.icann.org/services/tools/internic/domain/named.cache\"\n# Default configuration\nDEFAULT_CONFIG = {\n    \"server_ip\": \"127.0.0.1\",\n    \"num_threads\": os.cpu_count() or 1,\n    \"msg_cache_size\": \"64m\",\n    \"rrset_cache_size\": \"128m\",\n    \"cache_min_ttl\": 300,\n    \"cache_max_ttl\": 86400,\n    \"verbosity\": 1,",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CONFIG",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "DEFAULT_CONFIG = {\n    \"server_ip\": \"127.0.0.1\",\n    \"num_threads\": os.cpu_count() or 1,\n    \"msg_cache_size\": \"64m\",\n    \"rrset_cache_size\": \"128m\",\n    \"cache_min_ttl\": 300,\n    \"cache_max_ttl\": 86400,\n    \"verbosity\": 1,\n    \"do_ip4\": True,\n    \"do_ip6\": False,",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "COLORS = {\n    \"RED\": \"[red]\",\n    \"GREEN\": \"[green]\",\n    \"YELLOW\": \"[yellow]\",\n    \"BLUE\": \"[blue]\",\n    \"MAGENTA\": \"[magenta]\",\n    \"CYAN\": \"[cyan]\",\n    \"WHITE\": \"[white]\",\n    \"BOLD\": \"[bold]\",\n    \"NC\": \"[/]\",  # No color / reset",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "TEST_DOMAINS",
        "kind": 5,
        "importPath": "unbound_manager.constants",
        "description": "unbound_manager.constants",
        "peekOfCode": "TEST_DOMAINS = {\n    \"basic\": \"google.com\",\n    \"dnssec\": \"iana.org\",\n    \"dnssec_fail\": \"dnssec-failed.org\",\n    \"ipv4\": \"example.com\",\n    \"ipv6\": \"google.com\",\n    \"mx\": \"gmail.com\",\n    \"txt\": \"google.com\",\n}",
        "detail": "unbound_manager.constants",
        "documentation": {}
    },
    {
        "label": "DNSSECManager",
        "kind": 6,
        "importPath": "unbound_manager.dnssec",
        "description": "unbound_manager.dnssec",
        "peekOfCode": "class DNSSECManager:\n    \"\"\"Manage DNSSEC configuration and keys.\"\"\"\n    def setup_root_hints(self) -> bool:\n        \"\"\"Download and setup root hints file.\"\"\"\n        console.print(\"[cyan]Setting up root hints...[/cyan]\")\n        # Backup existing file if it exists\n        if ROOT_HINTS.exists():\n            backup_path = ROOT_HINTS.with_suffix('.hints.bak')\n            console.print(f\"[yellow]Backing up existing root hints to {backup_path}[/yellow]\")\n            ROOT_HINTS.rename(backup_path)",
        "detail": "unbound_manager.dnssec",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "unbound_manager.dnssec",
        "description": "unbound_manager.dnssec",
        "peekOfCode": "console = Console()\nclass DNSSECManager:\n    \"\"\"Manage DNSSEC configuration and keys.\"\"\"\n    def setup_root_hints(self) -> bool:\n        \"\"\"Download and setup root hints file.\"\"\"\n        console.print(\"[cyan]Setting up root hints...[/cyan]\")\n        # Backup existing file if it exists\n        if ROOT_HINTS.exists():\n            backup_path = ROOT_HINTS.with_suffix('.hints.bak')\n            console.print(f\"[yellow]Backing up existing root hints to {backup_path}[/yellow]\")",
        "detail": "unbound_manager.dnssec",
        "documentation": {}
    },
    {
        "label": "UnboundInstaller",
        "kind": 6,
        "importPath": "unbound_manager.installer",
        "description": "unbound_manager.installer",
        "peekOfCode": "class UnboundInstaller:\n    \"\"\"Handle Unbound installation and updates.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize the installer.\"\"\"\n        self.config_manager = ConfigManager()\n        self.redis_manager = RedisManager()\n        self.dnssec_manager = DNSSECManager()\n    def get_available_versions(self) -> List[str]:\n        \"\"\"Fetch available Unbound versions from GitHub.\"\"\"\n        try:",
        "detail": "unbound_manager.installer",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "unbound_manager.installer",
        "description": "unbound_manager.installer",
        "peekOfCode": "console = Console()\nclass UnboundInstaller:\n    \"\"\"Handle Unbound installation and updates.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize the installer.\"\"\"\n        self.config_manager = ConfigManager()\n        self.redis_manager = RedisManager()\n        self.dnssec_manager = DNSSECManager()\n    def get_available_versions(self) -> List[str]:\n        \"\"\"Fetch available Unbound versions from GitHub.\"\"\"",
        "detail": "unbound_manager.installer",
        "documentation": {}
    },
    {
        "label": "RedisManager",
        "kind": 6,
        "importPath": "unbound_manager.redis_manager",
        "description": "unbound_manager.redis_manager",
        "peekOfCode": "class RedisManager:\n    \"\"\"Manage Redis integration with Unbound.\"\"\"\n    def configure_redis(self) -> bool:\n        \"\"\"Configure Redis for Unbound integration.\"\"\"\n        console.print(Panel.fit(\n            \"[bold cyan]Redis Configuration[/bold cyan]\\n\\n\"\n            \"Configuring Redis for caching integration with Unbound.\",\n            border_style=\"cyan\"\n        ))\n        # Install Redis if needed",
        "detail": "unbound_manager.redis_manager",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "unbound_manager.redis_manager",
        "description": "unbound_manager.redis_manager",
        "peekOfCode": "console = Console()\nclass RedisManager:\n    \"\"\"Manage Redis integration with Unbound.\"\"\"\n    def configure_redis(self) -> bool:\n        \"\"\"Configure Redis for Unbound integration.\"\"\"\n        console.print(Panel.fit(\n            \"[bold cyan]Redis Configuration[/bold cyan]\\n\\n\"\n            \"Configuring Redis for caching integration with Unbound.\",\n            border_style=\"cyan\"\n        ))",
        "detail": "unbound_manager.redis_manager",
        "documentation": {}
    },
    {
        "label": "UnboundTester",
        "kind": 6,
        "importPath": "unbound_manager.tester",
        "description": "unbound_manager.tester",
        "peekOfCode": "class UnboundTester:\n    \"\"\"Test Unbound DNS functionality.\"\"\"\n    def verify_installation(self) -> bool:\n        \"\"\"Quick verification of Unbound installation.\"\"\"\n        console.print(\"[cyan]Verifying Unbound installation...[/cyan]\")\n        # Check if unbound is installed\n        try:\n            result = run_command([\"which\", \"unbound\"], check=False)\n            if result.returncode != 0:\n                console.print(\"[red]✗[/red] Unbound is not installed\")",
        "detail": "unbound_manager.tester",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "unbound_manager.tester",
        "description": "unbound_manager.tester",
        "peekOfCode": "console = Console()\nclass UnboundTester:\n    \"\"\"Test Unbound DNS functionality.\"\"\"\n    def verify_installation(self) -> bool:\n        \"\"\"Quick verification of Unbound installation.\"\"\"\n        console.print(\"[cyan]Verifying Unbound installation...[/cyan]\")\n        # Check if unbound is installed\n        try:\n            result = run_command([\"which\", \"unbound\"], check=False)\n            if result.returncode != 0:",
        "detail": "unbound_manager.tester",
        "documentation": {}
    },
    {
        "label": "Troubleshooter",
        "kind": 6,
        "importPath": "unbound_manager.troubleshooter",
        "description": "unbound_manager.troubleshooter",
        "peekOfCode": "class Troubleshooter:\n    \"\"\"Troubleshooting tools for Unbound issues.\"\"\"\n    def run_diagnostics(self) -> None:\n        \"\"\"Run comprehensive diagnostics.\"\"\"\n        console.print(Panel.fit(\n            \"[bold cyan]Unbound Diagnostics[/bold cyan]\\n\\n\"\n            \"Running comprehensive system checks...\",\n            border_style=\"cyan\"\n        ))\n        issues = []",
        "detail": "unbound_manager.troubleshooter",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "unbound_manager.troubleshooter",
        "description": "unbound_manager.troubleshooter",
        "peekOfCode": "console = Console()\nclass Troubleshooter:\n    \"\"\"Troubleshooting tools for Unbound issues.\"\"\"\n    def run_diagnostics(self) -> None:\n        \"\"\"Run comprehensive diagnostics.\"\"\"\n        console.print(Panel.fit(\n            \"[bold cyan]Unbound Diagnostics[/bold cyan]\\n\\n\"\n            \"Running comprehensive system checks...\",\n            border_style=\"cyan\"\n        ))",
        "detail": "unbound_manager.troubleshooter",
        "documentation": {}
    },
    {
        "label": "check_root",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def check_root() -> None:\n    \"\"\"Check if the script is running as root.\"\"\"\n    if os.geteuid() != 0:\n        console.print(\"[red]✗ This application must be run as root[/red]\")\n        sys.exit(1)\ndef run_command(\n    command: List[str],\n    check: bool = True,\n    capture_output: bool = True,\n    text: bool = True,",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def run_command(\n    command: List[str],\n    check: bool = True,\n    capture_output: bool = True,\n    text: bool = True,\n    timeout: Optional[int] = 30,\n    cwd: Optional[Path] = None,  # Add this parameter\n) -> subprocess.CompletedProcess:\n    \"\"\"\n    Run a shell command and return the result.",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "check_service_status",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def check_service_status(service: str) -> bool:\n    \"\"\"Check if a systemd service is running.\"\"\"\n    try:\n        result = run_command(\n            [\"systemctl\", \"is-active\", \"--quiet\", service],\n            check=False,\n        )\n        return result.returncode == 0\n    except Exception:\n        return False",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "restart_service",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def restart_service(service: str) -> bool:\n    \"\"\"Restart a systemd service.\"\"\"\n    try:\n        run_command([\"systemctl\", \"restart\", service])\n        time.sleep(2)  # Give service time to start\n        return check_service_status(service)\n    except Exception as e:\n        console.print(f\"[red]Failed to restart {service}: {e}[/red]\")\n        return False\ndef get_server_ip() -> str:",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "get_server_ip",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def get_server_ip() -> str:\n    \"\"\"Get the server's primary IP address.\"\"\"\n    try:\n        # Try to get IP from network interfaces\n        result = run_command(\n            [\"ip\", \"-4\", \"addr\", \"show\", \"scope\", \"global\"],\n            check=False,\n        )\n        if result.returncode == 0 and result.stdout:\n            import re",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "check_port_listening",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def check_port_listening(port: int, host: str = \"127.0.0.1\") -> bool:\n    \"\"\"Check if a port is listening.\"\"\"\n    for conn in psutil.net_connections():\n        if conn.status == 'LISTEN' and conn.laddr.port == port:\n            if host == \"0.0.0.0\" or conn.laddr.ip == host or conn.laddr.ip == \"0.0.0.0\":\n                return True\n    return False\ndef ensure_directory(path: Path, owner: str = \"unbound\", group: str = \"unbound\", mode: int = 0o755) -> None:\n    \"\"\"Ensure a directory exists with proper permissions.\"\"\"\n    path.mkdir(parents=True, exist_ok=True)",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "ensure_directory",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def ensure_directory(path: Path, owner: str = \"unbound\", group: str = \"unbound\", mode: int = 0o755) -> None:\n    \"\"\"Ensure a directory exists with proper permissions.\"\"\"\n    path.mkdir(parents=True, exist_ok=True)\n    if owner and group:\n        try:\n            import pwd\n            import grp\n            uid = pwd.getpwnam(owner).pw_uid\n            gid = grp.getgrnam(group).gr_gid\n            os.chown(path, uid, gid)",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "ensure_user_exists",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def ensure_user_exists(username: str = \"unbound\", home: str = \"/var/lib/unbound\", shell: str = \"/usr/sbin/nologin\") -> None:\n    \"\"\"Ensure the unbound user exists.\"\"\"\n    try:\n        import pwd\n        pwd.getpwnam(username)\n    except KeyError:\n        console.print(f\"[yellow]Creating user {username}...[/yellow]\")\n        run_command([\n            \"useradd\",\n            \"-r\",  # System user",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "set_file_permissions",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def set_file_permissions(path: Path, owner: str = \"unbound\", group: str = \"unbound\", mode: int = 0o644) -> None:\n    \"\"\"Set file ownership and permissions.\"\"\"\n    if not path.exists():\n        return\n    try:\n        import pwd\n        import grp\n        uid = pwd.getpwnam(owner).pw_uid\n        gid = grp.getgrnam(group).gr_gid\n        os.chown(path, uid, gid)",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "download_file",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def download_file(url: str, destination: Path, timeout: int = 30) -> bool:\n    \"\"\"Download a file from a URL.\"\"\"\n    import requests\n    try:\n        with Progress(\n            SpinnerColumn(),\n            TextColumn(\"[progress.description]{task.description}\"),\n            transient=True,\n        ) as progress:\n            task = progress.add_task(f\"Downloading {destination.name}...\", total=None)",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "prompt_yes_no",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def prompt_yes_no(question: str, default: bool = False) -> bool:\n    \"\"\"Prompt the user for a yes/no answer.\"\"\"\n    default_str = \"Y/n\" if default else \"y/N\"\n    response = console.input(f\"[cyan]{question} [{default_str}]: [/cyan]\").strip().lower()\n    if not response:\n        return default\n    return response in ['y', 'yes']\ndef get_system_info() -> Dict[str, Any]:\n    \"\"\"Get system information.\"\"\"\n    return {",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "get_system_info",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def get_system_info() -> Dict[str, Any]:\n    \"\"\"Get system information.\"\"\"\n    return {\n        \"cpu_count\": os.cpu_count() or 1,\n        \"memory_total\": psutil.virtual_memory().total,\n        \"memory_available\": psutil.virtual_memory().available,\n        \"disk_usage\": psutil.disk_usage('/').percent,\n        \"load_average\": os.getloadavg(),\n        \"hostname\": socket.gethostname(),\n    }",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "format_bytes",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def format_bytes(bytes_value: int) -> str:\n    \"\"\"Format bytes to human readable string.\"\"\"\n    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if bytes_value < 1024.0:\n            return f\"{bytes_value:.2f} {unit}\"\n        bytes_value /= 1024.0\n    return f\"{bytes_value:.2f} PB\"\ndef validate_ip_address(ip: str) -> bool:\n    \"\"\"Validate an IP address.\"\"\"\n    try:",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "validate_ip_address",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def validate_ip_address(ip: str) -> bool:\n    \"\"\"Validate an IP address.\"\"\"\n    try:\n        socket.inet_aton(ip)\n        return True\n    except socket.error:\n        return False\ndef check_package_installed(package: str) -> bool:\n    \"\"\"Check if a system package is installed.\"\"\"\n    try:",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "check_package_installed",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def check_package_installed(package: str) -> bool:\n    \"\"\"Check if a system package is installed.\"\"\"\n    try:\n        result = run_command(\n            [\"dpkg\", \"-l\", package],\n            check=False,\n            capture_output=True,\n        )\n        return result.returncode == 0 and \"ii\" in result.stdout\n    except Exception:",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "install_packages",
        "kind": 2,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "def install_packages(packages: List[str]) -> bool:\n    \"\"\"Install system packages using apt.\"\"\"\n    try:\n        console.print(f\"[cyan]Installing packages: {', '.join(packages)}[/cyan]\")\n        # Update package list\n        run_command([\"apt\", \"update\"], check=True)\n        # Install packages\n        run_command(\n            [\"apt\", \"install\", \"-y\"] + packages,\n            check=True,",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "unbound_manager.utils",
        "description": "unbound_manager.utils",
        "peekOfCode": "console = Console()\ndef check_root() -> None:\n    \"\"\"Check if the script is running as root.\"\"\"\n    if os.geteuid() != 0:\n        console.print(\"[red]✗ This application must be run as root[/red]\")\n        sys.exit(1)\ndef run_command(\n    command: List[str],\n    check: bool = True,\n    capture_output: bool = True,",
        "detail": "unbound_manager.utils",
        "documentation": {}
    },
    {
        "label": "version_file",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "version_file = Path(__file__).parent / \"VERSION\"\nif version_file.exists():\n    version = version_file.read_text().strip()\nelse:\n    version = \"2.0.1\"\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\nwith open(\"requirements.txt\", \"r\", encoding=\"utf-8\") as fh:\n    requirements = [line.strip() for line in fh if line.strip() and not line.startswith(\"#\")]\nsetup(",
        "detail": "setup",
        "documentation": {}
    }
]